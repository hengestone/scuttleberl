%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.1
-module(ssb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_keytype/1, enum_value_by_symbol_keytype/1]).
-export([enum_symbol_by_value_msgtype/1, enum_value_by_symbol_msgtype/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("ssb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'keytype'() :: 'ed25519' | 'ed448'.
-type 'msgtype'() :: 'pub' | 'invite'.
-export_type(['keytype'/0, 'msgtype'/0]).

%% message types
-type identity() :: #identity{}.

-type address() :: #address{}.

-type content() :: #content{}.

-type msg() :: #msg{}.

-type invite() :: #invite{}.

-export_type(['identity'/0, 'address'/0, 'content'/0, 'msg'/0, 'invite'/0]).

-spec encode_msg(#identity{} | #address{} | #content{} | #msg{} | #invite{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#identity{} | #address{} | #content{} | #msg{} | #invite{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#identity{} | #address{} | #content{} | #msg{} | #invite{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      identity ->
	  encode_msg_identity(id(Msg, TrUserData), TrUserData);
      address ->
	  encode_msg_address(id(Msg, TrUserData), TrUserData);
      content ->
	  encode_msg_content(id(Msg, TrUserData), TrUserData);
      msg -> encode_msg_msg(id(Msg, TrUserData), TrUserData);
      invite ->
	  encode_msg_invite(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_identity(Msg, TrUserData) ->
    encode_msg_identity(Msg, <<>>, TrUserData).


encode_msg_identity(#identity{tpe = F1, secret_key = F2,
			      public_key = F3, text = F4},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= ed25519; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_keytype(TrF1, <<Bin/binary, 8>>,
					'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case iolist_size(TrF3) of
		    0 -> B2;
		    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case iolist_size(TrF4) of
	       0 -> B3;
	       _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

encode_msg_address(Msg, TrUserData) ->
    encode_msg_address(Msg, <<>>, TrUserData).


encode_msg_address(#address{host = F1, port = F2,
			    key = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    e_mfield_address_key(TrF3, <<B2/binary, 26>>,
					 TrUserData)
	     end
	   end
    end.

encode_msg_content(Msg, TrUserData) ->
    encode_msg_content(Msg, <<>>, TrUserData).


encode_msg_content(#content{tpe = F1, address = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= pub; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_msgtype(TrF1, <<Bin/binary, 8>>,
					'MaybeTrUserData')
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_content_address(TrF2, <<B1/binary, 18>>,
					     TrUserData)
	     end
	   end
    end.

encode_msg_msg(Msg, TrUserData) ->
    encode_msg_msg(Msg, <<>>, TrUserData).


encode_msg_msg(#msg{author = F1, content = F2}, Bin,
	       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_msg_author(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_msg_content(TrF2, <<B1/binary, 18>>,
					 TrUserData)
	     end
	   end
    end.

encode_msg_invite(Msg, TrUserData) ->
    encode_msg_invite(Msg, <<>>, TrUserData).


encode_msg_invite(#invite{keys = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= undefined -> Bin;
		true ->
		    e_mfield_invite_keys(TrF1, <<Bin/binary, 10>>,
					 TrUserData)
	     end
	   end
    end.

e_mfield_address_key(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_identity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_content_address(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_address(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_msg_author(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_identity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_msg_content(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_content(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_invite_keys(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_identity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_keytype(ed25519, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_keytype(ed448, Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_keytype(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_msgtype(pub, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_msgtype(invite, Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_msgtype(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(identity, Bin, TrUserData) ->
    id(decode_msg_identity(Bin, TrUserData), TrUserData);
decode_msg_2_doit(address, Bin, TrUserData) ->
    id(decode_msg_address(Bin, TrUserData), TrUserData);
decode_msg_2_doit(content, Bin, TrUserData) ->
    id(decode_msg_content(Bin, TrUserData), TrUserData);
decode_msg_2_doit(msg, Bin, TrUserData) ->
    id(decode_msg_msg(Bin, TrUserData), TrUserData);
decode_msg_2_doit(invite, Bin, TrUserData) ->
    id(decode_msg_invite(Bin, TrUserData), TrUserData).



decode_msg_identity(Bin, TrUserData) ->
    dfp_read_field_def_identity(Bin, 0, 0,
				id(ed25519, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				TrUserData).

dfp_read_field_def_identity(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_identity_tpe(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_identity(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_identity_secret_key(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_identity(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_identity_public_key(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_identity(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_identity_text(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_identity(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #identity{tpe = F@_1, secret_key = F@_2,
	      public_key = F@_3, text = F@_4};
dfp_read_field_def_identity(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    dg_read_field_def_identity(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

dg_read_field_def_identity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_identity(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_identity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_identity_tpe(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      18 ->
	  d_field_identity_secret_key(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      26 ->
	  d_field_identity_public_key(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      34 ->
	  d_field_identity_text(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_identity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    1 ->
		skip_64_identity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    2 ->
		skip_length_delimited_identity(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_identity(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_identity(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData)
	  end
    end;
dg_read_field_def_identity(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #identity{tpe = F@_1, secret_key = F@_2,
	      public_key = F@_3, text = F@_4}.

d_field_identity_tpe(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_identity_tpe(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_identity_tpe(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_keytype(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_identity(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, TrUserData).

d_field_identity_secret_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_identity_secret_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_identity_secret_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_identity(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, TrUserData).

d_field_identity_public_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_identity_public_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_identity_public_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_identity(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, TrUserData).

d_field_identity_text(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_identity_text(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_identity_text(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_identity(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, TrUserData).

skip_varint_identity(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_identity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
skip_varint_identity(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_length_delimited_identity(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_identity(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
skip_length_delimited_identity(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_identity(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_group_identity(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_identity(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_32_identity(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_64_identity(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_identity(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

decode_msg_address(Bin, TrUserData) ->
    dfp_read_field_def_address(Bin, 0, 0,
			       id(<<>>, TrUserData), id(0, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_address(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_address_host(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_address(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_address_port(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_address(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_address_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_address(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #address{host = F@_1, port = F@_2, key = F@_3};
dfp_read_field_def_address(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_address(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_address(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_address(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_address(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_address_host(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      16 ->
	  d_field_address_port(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      26 ->
	  d_field_address_key(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_address(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_address(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_address(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_address(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_address(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_address(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #address{host = F@_1, port = F@_2, key = F@_3}.

d_field_address_host(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_address_host(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_address_host(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_address(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_address_port(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_address_port(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_address_port(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_address(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_address_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_address_key(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_address_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_identity(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_address(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_identity(Prev, NewFValue,
							 TrUserData)
			       end,
			       TrUserData).

skip_varint_address(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_address(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_address(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_address(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_address(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_address(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_address(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_address(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_address(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_content(Bin, TrUserData) ->
    dfp_read_field_def_content(Bin, 0, 0,
			       id(pub, TrUserData), id(undefined, TrUserData),
			       TrUserData).

dfp_read_field_def_content(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_content_tpe(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_content(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_content_address(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_content(<<>>, 0, 0, F@_1, F@_2, _) ->
    #content{tpe = F@_1, address = F@_2};
dfp_read_field_def_content(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_content(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_content(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_content(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_content(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_content_tpe(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_content_address(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_content(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_content(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_content(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_content(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_content(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_content(<<>>, 0, 0, F@_1, F@_2, _) ->
    #content{tpe = F@_1, address = F@_2}.

d_field_content_tpe(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_content_tpe(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_content_tpe(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_msgtype(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_content(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_content_address(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_content_address(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_content_address(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_address(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_content(RestF, 0, 0, F@_1,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_address(Prev, NewFValue,
							TrUserData)
			       end,
			       TrUserData).

skip_varint_content(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_content(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_content(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_content(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_content(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_content(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_content(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_content(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_content(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_content(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_content(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_content(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_content(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_content(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_msg(Bin, TrUserData) ->
    dfp_read_field_def_msg(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   TrUserData).

dfp_read_field_def_msg(<<10, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_msg_author(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_msg(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    d_field_msg_content(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #msg{author = F@_1, content = F@_2};
dfp_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2,
		       TrUserData) ->
    dg_read_field_def_msg(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData).

dg_read_field_def_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
dg_read_field_def_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_msg_author(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_msg_content(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_msg(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    3 ->
		skip_group_msg(Rest, Key bsr 3, 0, F@_1, F@_2,
			       TrUserData);
	    5 -> skip_32_msg(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_msg(<<>>, 0, 0, F@_1, F@_2, _) ->
    #msg{author = F@_1, content = F@_2}.

d_field_msg_author(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_msg_author(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_msg_author(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_identity(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_msg(RestF, 0, 0,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_identity(Prev, NewFValue,
						     TrUserData)
			   end,
			   F@_2, TrUserData).

d_field_msg_content(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_msg_content(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_msg_content(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_content(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_msg(RestF, 0, 0, F@_1,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_content(Prev, NewFValue, TrUserData)
			   end,
			   TrUserData).

skip_varint_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    skip_varint_msg(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_length_delimited_msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
skip_length_delimited_msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_msg(Rest2, 0, 0, F@_1, F@_2,
			   TrUserData).

skip_group_msg(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_msg(Rest, 0, Z2, F@_1, F@_2,
			   TrUserData).

skip_32_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

skip_64_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    TrUserData) ->
    dfp_read_field_def_msg(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData).

decode_msg_invite(Bin, TrUserData) ->
    dfp_read_field_def_invite(Bin, 0, 0,
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_invite(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_invite_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_invite(<<>>, 0, 0, F@_1, _) ->
    #invite{keys = F@_1};
dfp_read_field_def_invite(Other, Z1, Z2, F@_1,
			  TrUserData) ->
    dg_read_field_def_invite(Other, Z1, Z2, F@_1,
			     TrUserData).

dg_read_field_def_invite(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_invite(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
dg_read_field_def_invite(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_invite_keys(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_invite(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_invite(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_invite(Rest, 0, 0, F@_1,
					     TrUserData);
	    3 ->
		skip_group_invite(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_invite(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_invite(<<>>, 0, 0, F@_1, _) ->
    #invite{keys = F@_1}.

d_field_invite_keys(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, TrUserData)
    when N < 57 ->
    d_field_invite_keys(Rest, N + 7, X bsl N + Acc, F@_1,
			TrUserData);
d_field_invite_keys(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_identity(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_invite(RestF, 0, 0,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_identity(Prev, NewFValue,
							TrUserData)
			      end,
			      TrUserData).

skip_varint_invite(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    skip_varint_invite(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_invite(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    dfp_read_field_def_invite(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_length_delimited_invite(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_invite(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
skip_length_delimited_invite(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_invite(Rest2, 0, 0, F@_1,
			      TrUserData).

skip_group_invite(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_invite(Rest, 0, Z2, F@_1,
			      TrUserData).

skip_32_invite(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_invite(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_64_invite(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_invite(Rest, Z1, Z2, F@_1,
			      TrUserData).

d_enum_keytype(1) -> ed25519;
d_enum_keytype(2) -> ed448;
d_enum_keytype(V) -> V.

d_enum_msgtype(1) -> pub;
d_enum_msgtype(2) -> invite;
d_enum_msgtype(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      identity -> merge_msg_identity(Prev, New, TrUserData);
      address -> merge_msg_address(Prev, New, TrUserData);
      content -> merge_msg_content(Prev, New, TrUserData);
      msg -> merge_msg_msg(Prev, New, TrUserData);
      invite -> merge_msg_invite(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_identity/3}).
merge_msg_identity(#identity{tpe = PFtpe,
			     secret_key = PFsecret_key,
			     public_key = PFpublic_key, text = PFtext},
		   #identity{tpe = NFtpe, secret_key = NFsecret_key,
			     public_key = NFpublic_key, text = NFtext},
		   _) ->
    #identity{tpe =
		  if NFtpe =:= undefined -> PFtpe;
		     true -> NFtpe
		  end,
	      secret_key =
		  if NFsecret_key =:= undefined -> PFsecret_key;
		     true -> NFsecret_key
		  end,
	      public_key =
		  if NFpublic_key =:= undefined -> PFpublic_key;
		     true -> NFpublic_key
		  end,
	      text =
		  if NFtext =:= undefined -> PFtext;
		     true -> NFtext
		  end}.

-compile({nowarn_unused_function,merge_msg_address/3}).
merge_msg_address(#address{host = PFhost, port = PFport,
			   key = PFkey},
		  #address{host = NFhost, port = NFport, key = NFkey},
		  TrUserData) ->
    #address{host =
		 if NFhost =:= undefined -> PFhost;
		    true -> NFhost
		 end,
	     port =
		 if NFport =:= undefined -> PFport;
		    true -> NFport
		 end,
	     key =
		 if PFkey /= undefined, NFkey /= undefined ->
			merge_msg_identity(PFkey, NFkey, TrUserData);
		    PFkey == undefined -> NFkey;
		    NFkey == undefined -> PFkey
		 end}.

-compile({nowarn_unused_function,merge_msg_content/3}).
merge_msg_content(#content{tpe = PFtpe,
			   address = PFaddress},
		  #content{tpe = NFtpe, address = NFaddress},
		  TrUserData) ->
    #content{tpe =
		 if NFtpe =:= undefined -> PFtpe;
		    true -> NFtpe
		 end,
	     address =
		 if PFaddress /= undefined, NFaddress /= undefined ->
			merge_msg_address(PFaddress, NFaddress, TrUserData);
		    PFaddress == undefined -> NFaddress;
		    NFaddress == undefined -> PFaddress
		 end}.

-compile({nowarn_unused_function,merge_msg_msg/3}).
merge_msg_msg(#msg{author = PFauthor,
		   content = PFcontent},
	      #msg{author = NFauthor, content = NFcontent},
	      TrUserData) ->
    #msg{author =
	     if PFauthor /= undefined, NFauthor /= undefined ->
		    merge_msg_identity(PFauthor, NFauthor, TrUserData);
		PFauthor == undefined -> NFauthor;
		NFauthor == undefined -> PFauthor
	     end,
	 content =
	     if PFcontent /= undefined, NFcontent /= undefined ->
		    merge_msg_content(PFcontent, NFcontent, TrUserData);
		PFcontent == undefined -> NFcontent;
		NFcontent == undefined -> PFcontent
	     end}.

-compile({nowarn_unused_function,merge_msg_invite/3}).
merge_msg_invite(#invite{keys = PFkeys},
		 #invite{keys = NFkeys}, TrUserData) ->
    #invite{keys =
		if PFkeys /= undefined, NFkeys /= undefined ->
		       merge_msg_identity(PFkeys, NFkeys, TrUserData);
		   PFkeys == undefined -> NFkeys;
		   NFkeys == undefined -> PFkeys
		end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      identity -> v_msg_identity(Msg, [MsgName], TrUserData);
      address -> v_msg_address(Msg, [MsgName], TrUserData);
      content -> v_msg_content(Msg, [MsgName], TrUserData);
      msg -> v_msg_msg(Msg, [MsgName], TrUserData);
      invite -> v_msg_invite(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_identity/3}).
-dialyzer({nowarn_function,v_msg_identity/3}).
v_msg_identity(#identity{tpe = F1, secret_key = F2,
			 public_key = F3, text = F4},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_keytype(F1, [tpe | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_bytes(F2, [secret_key | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_bytes(F3, [public_key | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [text | Path], TrUserData)
    end,
    ok;
v_msg_identity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, identity}, X, Path).

-compile({nowarn_unused_function,v_msg_address/3}).
-dialyzer({nowarn_function,v_msg_address/3}).
v_msg_address(#address{host = F1, port = F2, key = F3},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [host | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [port | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_identity(F3, [key | Path], TrUserData)
    end,
    ok;
v_msg_address(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, address}, X, Path).

-compile({nowarn_unused_function,v_msg_content/3}).
-dialyzer({nowarn_function,v_msg_content/3}).
v_msg_content(#content{tpe = F1, address = F2}, Path,
	      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_msgtype(F1, [tpe | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_address(F2, [address | Path], TrUserData)
    end,
    ok;
v_msg_content(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, content}, X, Path).

-compile({nowarn_unused_function,v_msg_msg/3}).
-dialyzer({nowarn_function,v_msg_msg/3}).
v_msg_msg(#msg{author = F1, content = F2}, Path,
	  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_identity(F1, [author | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_content(F2, [content | Path], TrUserData)
    end,
    ok;
v_msg_msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, msg}, X, Path).

-compile({nowarn_unused_function,v_msg_invite/3}).
-dialyzer({nowarn_function,v_msg_invite/3}).
v_msg_invite(#invite{keys = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_identity(F1, [keys | Path], TrUserData)
    end,
    ok;
v_msg_invite(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, invite}, X, Path).

-compile({nowarn_unused_function,v_enum_keytype/3}).
-dialyzer({nowarn_function,v_enum_keytype/3}).
v_enum_keytype(ed25519, _Path, _TrUserData) -> ok;
v_enum_keytype(ed448, _Path, _TrUserData) -> ok;
v_enum_keytype(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_keytype(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, keytype}, X, Path).

-compile({nowarn_unused_function,v_enum_msgtype/3}).
-dialyzer({nowarn_function,v_enum_msgtype/3}).
v_enum_msgtype(pub, _Path, _TrUserData) -> ok;
v_enum_msgtype(invite, _Path, _TrUserData) -> ok;
v_enum_msgtype(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_msgtype(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, msgtype}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, keytype}, [{ed25519, 1}, {ed448, 2}]},
     {{enum, msgtype}, [{pub, 1}, {invite, 2}]},
     {{msg, identity},
      [#field{name = tpe, fnum = 1, rnum = 2,
	      type = {enum, keytype}, occurrence = optional,
	      opts = []},
       #field{name = secret_key, fnum = 2, rnum = 3,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = public_key, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = text, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, address},
      [#field{name = host, fnum = 1, rnum = 2, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = port, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = key, fnum = 3, rnum = 4,
	      type = {msg, identity}, occurrence = optional,
	      opts = []}]},
     {{msg, content},
      [#field{name = tpe, fnum = 1, rnum = 2,
	      type = {enum, msgtype}, occurrence = optional,
	      opts = []},
       #field{name = address, fnum = 2, rnum = 3,
	      type = {msg, address}, occurrence = optional,
	      opts = []}]},
     {{msg, msg},
      [#field{name = author, fnum = 1, rnum = 2,
	      type = {msg, identity}, occurrence = optional,
	      opts = []},
       #field{name = content, fnum = 2, rnum = 3,
	      type = {msg, content}, occurrence = optional,
	      opts = []}]},
     {{msg, invite},
      [#field{name = keys, fnum = 1, rnum = 2,
	      type = {msg, identity}, occurrence = optional,
	      opts = []}]}].


get_msg_names() ->
    [identity, address, content, msg, invite].


get_group_names() -> [].


get_msg_or_group_names() ->
    [identity, address, content, msg, invite].


get_enum_names() -> [keytype, msgtype].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(identity) ->
    [#field{name = tpe, fnum = 1, rnum = 2,
	    type = {enum, keytype}, occurrence = optional,
	    opts = []},
     #field{name = secret_key, fnum = 2, rnum = 3,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = public_key, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = text, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def(address) ->
    [#field{name = host, fnum = 1, rnum = 2, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = port, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = key, fnum = 3, rnum = 4,
	    type = {msg, identity}, occurrence = optional,
	    opts = []}];
find_msg_def(content) ->
    [#field{name = tpe, fnum = 1, rnum = 2,
	    type = {enum, msgtype}, occurrence = optional,
	    opts = []},
     #field{name = address, fnum = 2, rnum = 3,
	    type = {msg, address}, occurrence = optional,
	    opts = []}];
find_msg_def(msg) ->
    [#field{name = author, fnum = 1, rnum = 2,
	    type = {msg, identity}, occurrence = optional,
	    opts = []},
     #field{name = content, fnum = 2, rnum = 3,
	    type = {msg, content}, occurrence = optional,
	    opts = []}];
find_msg_def(invite) ->
    [#field{name = keys, fnum = 1, rnum = 2,
	    type = {msg, identity}, occurrence = optional,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(keytype) -> [{ed25519, 1}, {ed448, 2}];
find_enum_def(msgtype) -> [{pub, 1}, {invite, 2}];
find_enum_def(_) -> error.


enum_symbol_by_value(keytype, Value) ->
    enum_symbol_by_value_keytype(Value);
enum_symbol_by_value(msgtype, Value) ->
    enum_symbol_by_value_msgtype(Value).


enum_value_by_symbol(keytype, Sym) ->
    enum_value_by_symbol_keytype(Sym);
enum_value_by_symbol(msgtype, Sym) ->
    enum_value_by_symbol_msgtype(Sym).


enum_symbol_by_value_keytype(1) -> ed25519;
enum_symbol_by_value_keytype(2) -> ed448.


enum_value_by_symbol_keytype(ed25519) -> 1;
enum_value_by_symbol_keytype(ed448) -> 2.

enum_symbol_by_value_msgtype(1) -> pub;
enum_symbol_by_value_msgtype(2) -> invite.


enum_value_by_symbol_msgtype(pub) -> 1;
enum_value_by_symbol_msgtype(invite) -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ssb.identity">>) -> identity;
fqbin_to_msg_name(<<"ssb.address">>) -> address;
fqbin_to_msg_name(<<"ssb.content">>) -> content;
fqbin_to_msg_name(<<"ssb.msg">>) -> msg;
fqbin_to_msg_name(<<"ssb.invite">>) -> invite;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(identity) -> <<"ssb.identity">>;
msg_name_to_fqbin(address) -> <<"ssb.address">>;
msg_name_to_fqbin(content) -> <<"ssb.content">>;
msg_name_to_fqbin(msg) -> <<"ssb.msg">>;
msg_name_to_fqbin(invite) -> <<"ssb.invite">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"ssb.keytype">>) -> keytype;
fqbin_to_enum_name(<<"ssb.msgtype">>) -> msgtype;
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin(keytype) -> <<"ssb.keytype">>;
enum_name_to_fqbin(msgtype) -> <<"ssb.msgtype">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> ssb.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "ssb.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ssb.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ssb"].


get_msg_containment("ssb") ->
    [address, content, identity, invite, msg];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("ssb") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("ssb") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("ssb") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("ssb") -> [keytype, msgtype];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ssb.address">>) -> "ssb";
get_proto_by_msg_name_as_fqbin(<<"ssb.content">>) -> "ssb";
get_proto_by_msg_name_as_fqbin(<<"ssb.invite">>) -> "ssb";
get_proto_by_msg_name_as_fqbin(<<"ssb.msg">>) -> "ssb";
get_proto_by_msg_name_as_fqbin(<<"ssb.identity">>) -> "ssb";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"ssb.msgtype">>) -> "ssb";
get_proto_by_enum_name_as_fqbin(<<"ssb.keytype">>) -> "ssb";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.1".

gpb_version_as_list() ->
    [4,7,1].
